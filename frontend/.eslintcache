[{"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/index.js":"1","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/App.js":"2","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/Navbar.js":"3","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/Builder.js":"4","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/PageBackground.js":"5","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarBackground.js":"6","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarLinks.js":"7","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarWidth.js":"8","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarHeight.js":"9","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/ScrollPage.js":"10","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarPosition.js":"11","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/CTALink.js":"12","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/LinksOnHover.js":"13","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarBorder.js":"14","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/CTALinkOnHover.js":"15","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarMobileMenuButton.js":"16","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/MobileMenu.js":"17","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/MobileMenuSettings.js":"18"},{"size":224,"mtime":1608970504994,"results":"19","hashOfConfig":"20"},{"size":13363,"mtime":1609825026677,"results":"21","hashOfConfig":"20"},{"size":5671,"mtime":1609815367104,"results":"22","hashOfConfig":"20"},{"size":13110,"mtime":1609815212605,"results":"23","hashOfConfig":"20"},{"size":3608,"mtime":1609150300349,"results":"24","hashOfConfig":"20"},{"size":720,"mtime":1608970686712,"results":"25","hashOfConfig":"20"},{"size":2681,"mtime":1609216499636,"results":"26","hashOfConfig":"20"},{"size":1619,"mtime":1609405827359,"results":"27","hashOfConfig":"20"},{"size":687,"mtime":1609131368697,"results":"28","hashOfConfig":"20"},{"size":263,"mtime":1609132000931,"results":"29","hashOfConfig":"20"},{"size":1452,"mtime":1609136689949,"results":"30","hashOfConfig":"20"},{"size":5927,"mtime":1609235230879,"results":"31","hashOfConfig":"20"},{"size":5116,"mtime":1609288915075,"results":"32","hashOfConfig":"20"},{"size":2979,"mtime":1609279356967,"results":"33","hashOfConfig":"20"},{"size":3527,"mtime":1609400992669,"results":"34","hashOfConfig":"20"},{"size":2950,"mtime":1609810340825,"results":"35","hashOfConfig":"20"},{"size":1421,"mtime":1609825183346,"results":"36","hashOfConfig":"20"},{"size":2772,"mtime":1609815191871,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"l4hbzt",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/index.js",[],["77","78"],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/App.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/Navbar.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/Builder.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/PageBackground.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarBackground.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarLinks.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarWidth.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarHeight.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/ScrollPage.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarPosition.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/CTALink.js",["79"],"import { useState, useEffect } from 'react';\nimport { useCheckboxState, Checkbox, Switch } from 'pretty-checkbox-react';\nimport '@djthoms/pretty-checkbox';\nimport { ChromePicker } from 'react-color';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nconst CTALink = ({\n  saveCTABackgroundColor,\n  setCTASameAsLinkColor,\n  saveCTATextColor,\n  saveFontWeight,\n  saveBorderOnOrOff,\n  saveCTABorderColor,\n  saveCTABorderSize,\n  saveCTAWidth,\n  saveCTABorderRadius,\n}) => {\n  const [CTABackgroundColor, setCTABackgroundColor] = useState({ r: 255, g: 0, b: 0, a: 0 });\n  const [CTATextColor, setCTATextColor] = useState('#ffffff');\n  const [fontWeight, setFontWeight] = useState(400);\n  const [CTABorderColor, setCTABorderColor] = useState('#000000');\n  const [CTABorderSize, setCTABorderSize] = useState(1);\n  const [CTAWidth, setCTAWidth] = useState(1);\n  const [CTABorderRadius, setCTABorderRadius] = useState(0);\n  const checkbox = useCheckboxState();\n  const switchState = useCheckboxState();\n\n  useEffect(() => {\n    checkbox.setState(true);\n  }, []);\n\n  useEffect(() => {\n    saveCTABackgroundColor(CTABackgroundColor);\n    setCTASameAsLinkColor(checkbox.state);\n    saveCTATextColor(CTATextColor);\n    saveFontWeight(fontWeight);\n    saveBorderOnOrOff(switchState.state);\n    saveCTABorderColor(CTABorderColor);\n    saveCTABorderSize(CTABorderSize);\n    saveCTAWidth(CTAWidth);\n    saveCTABorderRadius(CTABorderRadius);\n  }, [\n    CTABackgroundColor,\n    saveCTABackgroundColor,\n    setCTASameAsLinkColor,\n    checkbox,\n    CTATextColor,\n    saveCTATextColor,\n    fontWeight,\n    saveFontWeight,\n    switchState,\n    saveBorderOnOrOff,\n    CTABorderColor,\n    saveCTABorderColor,\n    CTABorderSize,\n    saveCTABorderSize,\n    CTAWidth,\n    saveCTAWidth,\n    CTABorderRadius,\n    saveCTABorderRadius,\n  ]);\n\n  const handleCTAChange = (e) => {\n    setCTABackgroundColor(e.rgb);\n  };\n\n  const handleCTATextColorChange = (e) => {\n    setCTATextColor(e.hex);\n  };\n\n  const handleFontWeight = (e) => {\n    setFontWeight(e);\n  };\n\n  const handleCTABorderColorChange = (e) => {\n    setCTABorderColor(e.hex);\n  };\n\n  const handleCTABorderSize = (e) => {\n    setCTABorderSize(e);\n  };\n\n  const handleCTAWidth = (e) => {\n    setCTAWidth(e);\n  };\n\n  const handleCTABorderRadius = (e) => {\n    setCTABorderRadius(e);\n  };\n\n  return (\n    <div>\n      <h2>Choose a background color for your CTA link.</h2>\n      <br />\n      <hr />\n      <br />\n      <ChromePicker onChange={handleCTAChange} color={CTABackgroundColor} />\n      <br />\n      <br />\n      <br />\n      <hr />\n      <br />\n      <h2>Choose a color for your CTA link.</h2>\n      <br />\n      <hr />\n      <br />\n      <Checkbox shape='curve' bigger variant='fill' color='primary' animation={'jelly'} {...checkbox}>\n        Same as other links: {checkbox.state + ''}\n      </Checkbox>\n      <br />\n      <br />\n      <hr />\n      <br />\n      {checkbox.state === false && (\n        <ChromePicker disableAlpha onChange={handleCTATextColorChange} color={CTATextColor} />\n      )}\n      {checkbox.state === false && <br />}\n      {checkbox.state === false && <br />}\n      {checkbox.state === false && <br />}\n      {checkbox.state === false && <hr />}\n      {checkbox.state === false && <br />}\n      <h2>Choose a font weight for your CTA link.</h2>\n      <br />\n      <hr />\n      <br />\n      <label>Font Weight: {fontWeight}</label>\n      <br />\n      <br />\n      <Slider min={400} max={700} step={100} dots value={fontWeight} onChange={handleFontWeight} />\n      <br />\n      <hr />\n      <br />\n      <Switch shape='slim' color='primary' {...switchState}>\n        CTA Link Border: {switchState.state ? 'On' : 'Off'}\n      </Switch>\n      <br />\n      <br />\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <h2>Choose a border color for your CTA link.</h2>}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <ChromePicker disableAlpha onChange={handleCTABorderColorChange} color={CTABorderColor} />}\n      {switchState.state && <br />}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <h2>Choose the size of your CTA link border.</h2>}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <label>Border Size: {CTABorderSize}</label>}\n      {switchState.state && <br />}\n      {switchState.state && <br />}\n      {switchState.state && (\n        <Slider min={1} max={6} step={1} dots value={CTABorderSize} onChange={handleCTABorderSize} />\n      )}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <h2>Choose the width of your CTA link.</h2>}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <label>CTA Width: {CTAWidth}</label>}\n      {switchState.state && <br />}\n      {switchState.state && <br />}\n      {switchState.state && <Slider min={1} max={4} step={1} dots value={CTAWidth} onChange={handleCTAWidth} />}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <h2>Choose the radius of your border.</h2>}\n      {switchState.state && <br />}\n      {switchState.state && <hr />}\n      {switchState.state && <br />}\n      {switchState.state && <label>Border Radius: {CTABorderRadius}px</label>}\n      {switchState.state && <br />}\n      {switchState.state && <br />}\n      {switchState.state && (\n        <Slider min={0} max={30} step={1} value={CTABorderRadius} onChange={handleCTABorderRadius} />\n      )}\n      {switchState.state && <br />}\n    </div>\n  );\n};\n\nexport default CTALink;\n","/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/LinksOnHover.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarBorder.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/CTALinkOnHover.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/NavbarMobileMenuButton.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/MobileMenu.js",[],"/Users/steveanthony999/Desktop/Dev/projects/NavBam/React/03/navbam-react-win/frontend/src/components/MobileMenuSettings.js",["80"],"import { useState, useEffect } from 'react';\nimport { useCheckboxState, Checkbox } from 'pretty-checkbox-react';\nimport '@djthoms/pretty-checkbox';\nimport { ChromePicker } from 'react-color';\n\nconst MobileMenuSettings = ({\n  saveSameAsNavbarBackgroundColor,\n  saveMobileMenuBackgroundColor,\n  saveSameAsNavbarLinksColor,\n  saveMobileMenuLinksColor,\n}) => {\n  const [mobileMenuBackgroundColor, setMobileMenuBackgroundColor] = useState({ r: 41, g: 31, b: 90, a: 1 });\n  const [mobileMenuLinksColor, setMobileMenuLinksColor] = useState('#ffffff');\n  const checkbox = useCheckboxState();\n  const linksCheckbox = useCheckboxState();\n\n  useEffect(() => {\n    checkbox.setState(true);\n    linksCheckbox.setState(true);\n  }, []);\n\n  useEffect(() => {\n    saveSameAsNavbarBackgroundColor(checkbox.state);\n    saveMobileMenuBackgroundColor(mobileMenuBackgroundColor);\n    saveSameAsNavbarLinksColor(linksCheckbox.state);\n    saveMobileMenuLinksColor(mobileMenuLinksColor);\n  }, [\n    checkbox,\n    saveSameAsNavbarBackgroundColor,\n    mobileMenuBackgroundColor,\n    saveMobileMenuBackgroundColor,\n    linksCheckbox,\n    saveSameAsNavbarLinksColor,\n    mobileMenuLinksColor,\n    saveMobileMenuLinksColor,\n  ]);\n\n  const handleMobileMenuBackgroundColorChange = (e) => {\n    setMobileMenuBackgroundColor(e.rgb);\n  };\n\n  const handleMobileMenuLinksColorChange = (e) => {\n    setMobileMenuLinksColor(e.hex);\n  };\n\n  return (\n    <div>\n      <h2>Choose a background color for your Mobile Menu.</h2>\n      <br />\n      <hr />\n      <br />\n      <Checkbox shape='curve' bigger variant='fill' color='primary' animation={'jelly'} {...checkbox}>\n        Same as navbar: {checkbox.state + ''}\n      </Checkbox>\n      <br />\n      <br />\n      <hr />\n      <br />\n      {checkbox.state === false && (\n        <ChromePicker onChange={handleMobileMenuBackgroundColorChange} color={mobileMenuBackgroundColor} />\n      )}\n      {checkbox.state === false && <br />}\n      {checkbox.state === false && <br />}\n      {checkbox.state === false && <br />}\n      {checkbox.state === false && <hr />}\n      {checkbox.state === false && <br />}\n      <h2>Choose the links color for your Mobile Menu.</h2>\n      <br />\n      <hr />\n      <br />\n      <Checkbox shape='curve' bigger variant='fill' color='primary' animation={'jelly'} {...linksCheckbox}>\n        Same as links: {linksCheckbox.state + ''}\n      </Checkbox>\n      <br />\n      <br />\n      {linksCheckbox.state === false && <hr />}\n      {linksCheckbox.state === false && <br />}\n      {linksCheckbox.state === false && (\n        <ChromePicker disableAlpha onChange={handleMobileMenuLinksColorChange} color={mobileMenuLinksColor} />\n      )}\n      {linksCheckbox.state === false && <br />}\n    </div>\n  );\n};\n\nexport default MobileMenuSettings;\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":31,"column":6,"nodeType":"87","endLine":31,"endColumn":8,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":20,"column":6,"nodeType":"87","endLine":20,"endColumn":8,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkbox'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has missing dependencies: 'checkbox' and 'linksCheckbox'. Either include them or remove the dependency array.",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [checkbox]",{"range":"99","text":"100"},"Update the dependencies array to be: [checkbox, linksCheckbox]",{"range":"101","text":"102"},[1067,1069],"[checkbox]",[717,719],"[checkbox, linksCheckbox]"]